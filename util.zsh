HELPFILE=$CONFIG/help.txt

function help() {
    less $HELPFILE
}

# modified version of original file taken from
# https://github.com/derekwyatt/dotfiles/blob/master/zshrc
#   - added coloring output (ZSH only)
#   - added checking for number of parameters

function gitall {
    if [[ $# -gt 0 ]]; then
        find -L . -type d -a -name .git | while read d
        do
            local x=${d%.git}
            echo "$fg[yellow]========= $x$reset_color"
            (cd $x; git "$@")
        done
    else
        echo "function needs parameters passed to git"
    fi
}

# original version from http://blog.thelinuxkid.com/2013/06/automatically-start-tmux-on-ssh.html
# enhanced with checking if shell is login shell (so it won't start tmux
# when working in X terminal)
#
# starts tmux automatically on SSH login and logouts after detach.
# If tmux session exists, attaches to it, creating new one otherwise.
# this should be called from zshrc as a very last command

function tmux_autostart() {
	if [[ uname -ne 'Darwin' ]]; then
	    if [[ -o login ]]; then
		if [[ -z "$TMUX" ]]; then
		    tmux has-session &> /dev/null
		    if [ $? -eq 1 ]; then
		      exec tmux new
		      exit
		    else
		      exec tmux attach
		      exit
		    fi
		fi
	    fi
	fi
}

# this fuction is the default action taken on Ctrl-D hit on empty line. If in tmux, it detaches
# client, logging out otherwise
function tmux_detach_logout() {
    if [[ -z "$TMUX" ]]; then
        exit
    else
        tmux detach-client
    fi
}

# reloads shell config file
function reload_config() {
    source $HOME/.zshrc
    if [[ ! -z "$TMUX" ]]; then
        tmux source-file $CONFIG/config/tmux.conf
    fi
}

# rsync parameters tuned up to remote filesystem being NTFS - due to NTFS driver on linux
# root account on the other side is required for proper sync. Option --modify-window is
# required due to network delays and clock time differences and resolution of a NTFS
# timestamps.
#
# function arguments
#   - local dir
#   - remote dir
function syncdir() {

    local localdir=$1
    local remotedir=$2
    rsync -rvtW \
        --delete \
        --modify-window=30 \
        --progress \
        -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
        $localdir \
        $remotedir

}

# this function synchronizes either single entry or all of the entries in the
# config file defined in $SYNCRC global variable. If the parameter is equal to
# "all", all entries are synced
function syncname() {

    [[ $# == 0 ]] && { echo "Name not given."; return 1 }
    [[ -z $SYNCRC ]] && { echo "Global variable \$SYNCRC is not set"; return 1 }
    [[ ! -f $SYNCRC ]] && { echo "config file $SYNCRC does not exist"; return 1 }

    name_found=0
    while IFS="," read name src dest; do
        if [[ $1 == $name ]] || [[ $1 == "all" ]]; then
            name_found=1
            echo "syncing $src to $dest"
            syncdir $src $dest
        fi
    done < $SYNCRC

    [[ $name_found == 0 ]] && { echo "Name $1 not found in $syncrc config file"; return 1 }

}

# prints out date of last system update with pacman
function lastpac() {
    date -d "`cat /var/log/pacman.log | \
        grep "starting full system upgrade" | \
        tail -1 | \
        grep --color=never -o '[-0-9]* [:0-9]*'`"
}

# autogenerated python pip completion
# with: pip completion --zsh
function _pip_completion {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}

# virtualenv(wrapper) shortcuts

function vv {
    case $1 in
        '') echo 'usage: vv off | <prjname> | cd | link | mk <prjname>';;
        'off') deactivate;;
        'cd') cdproject;;
        'link') setvirtualenvproject;;
        'mk') if [[ $2 != '' ]]; then mkvirtualenv $2; else echo please provide a project name.; fi;;
        'rm') if [[ $2 != '' ]]; then rmvirtualenv $2; else echo please provide a project name.; fi;;
        *) workon $1;;
    esac
}

# sourcing local config files if config directory exist
function source_local_config {
    local config_dir=$1
    if [[ -e $config_dir ]] && [[ -d $config_dir ]]; then
        for file in `ls $config_dir`; do
            source $config_dir/$file
        done
    fi
}

# When using tmux in conjunction with SSH agent forwarding, tmux sessions on the
# remote machine will not reread SSH_AUTH_SOCK env variable after new login and
# attaching session. This is semi-automatic way to overcome it.

function ssh_refresh {
    if [[ -n "${TMUX}" ]]; then
        export $(tmux show-environment | grep "^SSH_AUTH_SOCK") 
    fi
}

# checks if executable exists
# reference: http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script
function exec_exists() {

    if hash $1 2>/dev/null; then 
        return 0
    else
        return 1
    fi 
}

# sets tmux version variables
function set_tmux_version_vars() {
    if exec_exists tmux; then
        eval `tmux -V | sed -r 's/tmux\s+([0-9]+)\.([0-9]+)/export TMUX_VERSION_MAJOR=\1 TMUX_VERSION_MINOR=\2/g'`
    fi
}

# following functions bring ssh tunnel up/down. Tunnels need to be defined in .ssh/config file
function tunnel() {
    if [[ "$#" -ne 2  ]]; then
        echo "provide command (up|down|status) and tunnel name to start."
    else
        case $1 in
            up)
                ssh -fNM $2
                ;;
            down)
                ssh -T -O exit $2
                ;;
            status)
                ssh -T -O check $2
                ;;
            *)
                echo "unknown command:" $1
        esac
    fi
}

